#include "AI_Task.h"
#include <SocketIOclient.h>
#include <ArduinoJson.h>
#include <math.h>

const char *server_host = "192.168.2.4";
const uint16_t server_port = 5000;

SocketIOclient socketIO;
bool connected = false;

// Task handles ƒë·ªÉ qu·∫£n l√Ω c√°c lu·ªìng FreeRTOS
TaskHandle_t socket_init_handle = NULL;
TaskHandle_t socket_loop_handle = NULL;
TaskHandle_t sensor_data_handle = NULL;
bool ai_tasks_running = false;

int currentIndex = 0; // G·ª≠i l·∫ßn l∆∞·ª£t t·ª´ng d√≤ng

float ph_base = 6.5, ph_slope = 0.002;
float do_base = 5.0, do_slope = -0.0015;
float temp_base = 27.0, temp_slope = 0.005;

// ======= Sinh 1 d√≤ng d·ªØ li·ªáu c·∫£m bi·∫øn gi·∫£ =======
void generateSingleSensorData(float *dataRow)
{
  // TƒÉng gi·∫£m tuy·∫øn t√≠nh c√≥ dao ƒë·ªông nh·ªè
  float ph = ph_base + ph_slope * currentIndex + sin(currentIndex * 0.1) * 0.1;
  float do_ = do_base + do_slope * currentIndex + cos(currentIndex * 0.1) * 0.15;
  float temp = temp_base + temp_slope * currentIndex + sin(currentIndex * 0.07) * 0.2;

  // Gi·ªõi h·∫°n ƒë·ªÉ gi·ªØ trong kho·∫£ng h·ª£p l√Ω
  ph = constrain(ph, 6.0, 7.0);
  do_ = constrain(do_, 4.5, 5.5);
  temp = constrain(temp, 26.0, 28.0);

  // G√°n gi√° tr·ªã v√†o m·∫£ng
  dataRow[0] = ph;
  dataRow[1] = do_;
  dataRow[2] = temp;

  // C√°c ƒë·∫∑c tr∆∞ng th·ªùi gian d·∫°ng sin/cos
  dataRow[3] = sin(currentIndex * 0.1);
  dataRow[4] = cos(currentIndex * 0.1);
  dataRow[5] = sin(currentIndex * 0.2);
  dataRow[6] = cos(currentIndex * 0.2);
}

// ======= H√†m m·ªõi: G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c =======
void AI_Task_SendSensorData(SensorData &data)
{
  if (!connected)
  {
    Serial.println("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi t·ªõi server!");
    return;
  }

  // T·∫°o JSON m·∫£ng cho d·ªØ li·ªáu
  DynamicJsonDocument doc(512);
  JsonArray arr = doc.to<JsonArray>();

  // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng mong mu·ªën c·ªßa server
  // Gi·∫£ s·ª≠ server c·∫ßn m·∫£ng 7 gi√° tr·ªã [pH, DO, temp, sin1, cos1, sin2, cos2]
  float ph = data.get_latest_data(MEASURE_PH);
  float do_ = data.get_latest_data(MEASURE_DO);
  float temp = data.get_latest_data(MEASURE_TEMP);

  // Th√™m gi√° tr·ªã pH, DO, nhi·ªát ƒë·ªô
  arr.add(ph);
  arr.add(do_);
  arr.add(temp);

  // Th√™m c√°c ƒë·∫∑c tr∆∞ng th·ªùi gian d·∫°ng sin/cos nh∆∞ trong d·ªØ li·ªáu gi·∫£
  int currentTime = millis() / 1000; // Th·ªùi gian hi·ªán t·∫°i (gi√¢y)
  arr.add(sin(currentTime * 0.1));
  arr.add(cos(currentTime * 0.1));
  arr.add(sin(currentTime * 0.2));
  arr.add(cos(currentTime * 0.2));

  String payload;
  serializeJson(doc, payload);

  String message = "[\"sensor_data\"," + payload + "]";
  socketIO.sendEVENT(message);

  Serial.printf("‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn th·ª±c: pH=%.2f, DO=%.2f, Temp=%.2f\n",
                ph, do_, temp);
}

// ======= G·ª≠i 1 d√≤ng d·ªØ li·ªáu c·∫£m bi·∫øn =======
void sendSingleSensorData()
{
  if (!connected)
  {
    Serial.println("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi t·ªõi server!");
    return;
  }

  float row[7];
  generateSingleSensorData(row);

  DynamicJsonDocument doc(512);
  JsonArray arr = doc.to<JsonArray>();
  for (int j = 0; j < 7; j++)
  {
    arr.add(row[j]);
  }

  String payload;
  serializeJson(doc, payload);

  String message = "[\"sensor_data\"," + payload + "]";
  socketIO.sendEVENT(message);

  Serial.printf("‚úÖ ƒê√£ g·ª≠i d√≤ng %d: %s\n", currentIndex, message.c_str());

  currentIndex = (currentIndex + 1) % 6; // Quay v√≤ng sau 6 d√≤ng
}

// ======= X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server =======
void socketIOEvent(socketIOmessageType_t type, uint8_t *payload, size_t length)
{
  switch (type)
  {
  case sIOtype_DISCONNECT:
    Serial.println("üîå M·∫•t k·∫øt n·ªëi server!");
    connected = false;
    break;

  case sIOtype_CONNECT:
    Serial.printf("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi server: %s\n", payload);
    socketIO.send(sIOtype_CONNECT, "/");
    connected = true;
    break;

  case sIOtype_EVENT:
  {
    Serial.println("üì® Nh·∫≠n ph·∫£n h·ªìi:");
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, payload, length);
    if (!error)
    {
      JsonArray arr = doc.as<JsonArray>();
      if (arr[0] == "prediction")
      {
        JsonObject pred = arr[1];
        float ph = pred["pH"];
        float do_ = pred["DO"];
        float temp = pred["Temperature"];
        Serial.printf("üì° D·ª± ƒëo√°n: pH=%.2f, DO=%.2f, Temp=%.2f\n", ph, do_, temp);

        // T·∫°o JSON ƒë·ªÉ g·ª≠i telemetry
        DynamicJsonDocument telemetryDoc(256);
        telemetryDoc["pH_predict"] = ph;
        telemetryDoc["DO_predict"] = do_;
        telemetryDoc["temp_predict"] = temp;

        String jsonStr;
        serializeJson(telemetryDoc, jsonStr);

        // G·ª≠i d·ªØ li·ªáu l√™n telemetry
        sendTelemetry(jsonStr);
      }
    }
    break;
  }

  case sIOtype_ERROR:
    Serial.printf("‚ùå SocketIO Error [%u bytes]\n", length);
    break;

  default:
    Serial.printf("‚öôÔ∏è S·ª± ki·ªán kh√°c [%u bytes]\n", length);
    break;
  }
}

// ======= Task kh·ªüi t·∫°o socket =======
void socket_init_task(void *pvParameters)
{
  socketIO.begin(server_host, server_port, "/socket.io/?EIO=4");
  socketIO.onEvent(socketIOEvent);

  vTaskDelete(NULL);
}

// ======= Task x·ª≠ l√Ω socket =======
void socket_loop_task(void *pvParameters)
{
  while (true)
  {
    socketIO.loop();
    vTaskDelay(10 / portTICK_PERIOD_MS); // Delay nh·ªè ƒë·ªÉ tr√°nh chi·∫øm CPU
  }
}

// ======= Task g·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn =======
void sensor_data_task(void *pvParameters)
{
  const TickType_t xDelay = 5000 / portTICK_PERIOD_MS; // G·ª≠i m·ªói 5 gi√¢y

  while (true)
  {
    if (connected)
    {
      // sendSingleSensorData();
      AI_Task_SendSensorData(sensorData);
    }
    vTaskDelay(xDelay);
  }
}

// ======= Kh·ªüi t·∫°o AI task =======
void AI_Task_Init()
{
  // Ki·ªÉm tra n·∫øu c√°c task ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥
  if (ai_tasks_running)
  {
    Serial.println("AI tasks ƒë√£ ƒëang ch·∫°y, kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i");
    return;
  }

  Serial.println("Kh·ªüi t·∫°o c√°c AI tasks...");

  // Kh·ªüi t·∫°o task v√† l∆∞u handle ƒë·ªÉ c√≥ th·ªÉ d·ª´ng sau n√†y
  xTaskCreate(socket_init_task, "Socket_Init_Task", 4096, NULL, 1, &socket_init_handle);
  xTaskCreate(socket_loop_task, "Socket_Loop_Task", 8192, NULL, 2, &socket_loop_handle);
  xTaskCreate(sensor_data_task, "Sensor_Data_Task", 4096, NULL, 1, &sensor_data_handle);

  ai_tasks_running = true;
  Serial.println("ƒê√£ kh·ªüi t·∫°o xong c√°c AI tasks");
}

// ======= D·ª´ng c√°c AI task =======
void AI_Task_Stop()
{
  if (!ai_tasks_running)
  {
    Serial.println("AI tasks kh√¥ng ch·∫°y, kh√¥ng c·∫ßn d·ª´ng");
    return;
  }

  Serial.println("ƒêang d·ª´ng c√°c AI tasks...");

  // D·ª´ng k·∫øt n·ªëi socket tr∆∞·ªõc khi x√≥a task
  if (connected)
  {
    socketIO.disconnect();
    connected = false;
    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o socket ƒë√£ x·ª≠ l√Ω vi·ªác ng·∫Øt k·∫øt n·ªëi
    delay(100);
  }

  // X√≥a c√°c task n·∫øu ch√∫ng t·ªìn t·∫°i
  if (socket_init_handle != NULL)
  {
    vTaskDelete(socket_init_handle);
    socket_init_handle = NULL;
    Serial.println("- ƒê√£ d·ª´ng Socket_Init_Task");
  }

  if (socket_loop_handle != NULL)
  {
    vTaskDelete(socket_loop_handle);
    socket_loop_handle = NULL;
    Serial.println("- ƒê√£ d·ª´ng Socket_Loop_Task");
  }

  if (sensor_data_handle != NULL)
  {
    vTaskDelete(sensor_data_handle);
    sensor_data_handle = NULL;
    Serial.println("- ƒê√£ d·ª´ng Sensor_Data_Task");
  }

  ai_tasks_running = false;
  Serial.println("ƒê√£ d·ª´ng t·∫•t c·∫£ AI tasks");
}